(self.webpackChunk_codemodsquad_try_it_pages=self.webpackChunk_codemodsquad_try_it_pages||[]).push([[544],{25330:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => /* binding */ InputOutputView\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\nvar defineProperty = __webpack_require__(59713);\nvar defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(87757);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(48926);\nvar asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\nvar slicedToArray = __webpack_require__(63038);\nvar slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__(6479);\nvar objectWithoutProperties_default = /*#__PURE__*/__webpack_require__.n(objectWithoutProperties);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/Typography/Typography.js\nvar Typography = __webpack_require__(22318);\n// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/CircularProgress/CircularProgress.js\nvar CircularProgress = __webpack_require__(95477);\n// EXTERNAL MODULE: ./node_modules/@material-ui/core/esm/styles/makeStyles.js\nvar makeStyles = __webpack_require__(41120);\n// EXTERNAL MODULE: ./node_modules/lodash/debounce.js\nvar debounce = __webpack_require__(23279);\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(94184);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 1 modules\nvar react_router = __webpack_require__(5977);\n;// CONCATENATED MODULE: ./src/useQueryParams.ts\n\n\n\nfunction useQueryParams() {\n  var history = (0,react_router/* useHistory */.k6)();\n\n  var _useLocation = (0,react_router/* useLocation */.TH)(),\n      pathname = _useLocation.pathname,\n      search = _useLocation.search;\n\n  var queryParams = react.useMemo(function () {\n    return new URLSearchParams(search);\n  }, [search]);\n  var setQueryParams = react.useCallback(function (newParams) {\n    var _final = new URLSearchParams(queryParams);\n\n    for (var _i = 0, _Object$entries = Object.entries(newParams); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n\n      _final.set(key, value);\n    }\n\n    history.push({\n      pathname: pathname,\n      search: \"?\".concat(_final.toString())\n    });\n  }, [queryParams]);\n  return [Object.fromEntries(queryParams.entries()), setQueryParams];\n}\n;// CONCATENATED MODULE: ./src/InputOutputView.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nvar useStyles = (0,makeStyles/* default */.Z)(function (theme) {\n  return {\n    root: {\n      flex: '1 1 auto',\n      marginTop: theme.spacing(1),\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'stretch',\n      alignContent: 'stretch'\n    },\n    input: {\n      flex: '0 0 50%',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    output: {\n      flex: '0 0 50%',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    textarea: {\n      border: 'none',\n      flex: '1 1 auto',\n      fontFamily: 'monospace',\n      whiteSpace: 'pre',\n      fontSize: theme.typography.pxToRem(14),\n      '&:not(:first-child)': {\n        borderLeft: '1px solid #ddd'\n      }\n    },\n    error: {\n      color: 'red'\n    }\n  };\n});\nfunction InputOutputView(_ref) {\n  var storageKey = _ref.storageKey,\n      inputTitle = _ref.inputTitle,\n      outputTitle = _ref.outputTitle,\n      transform = _ref.transform,\n      _ref$example = _ref.example,\n      example = _ref$example === void 0 ? '' : _ref$example,\n      props = objectWithoutProperties_default()(_ref, [\"storageKey\", \"inputTitle\", \"outputTitle\", \"transform\", \"example\"]);\n\n  var classes = useStyles(props);\n\n  var _useQueryParams = useQueryParams(),\n      _useQueryParams2 = slicedToArray_default()(_useQueryParams, 2),\n      queryParams = _useQueryParams2[0],\n      setQueryParams = _useQueryParams2[1];\n\n  var setInput = react.useCallback(function (input) {\n    setQueryParams({\n      input: input\n    });\n    localStorage.setItem(storageKey, input);\n  }, [setQueryParams]);\n  var _queryParams$input = queryParams.input,\n      input = _queryParams$input === void 0 ? '' : _queryParams$input;\n  react.useEffect(function () {\n    if (queryParams.input == null) {\n      setInput(localStorage.getItem(storageKey) || example);\n    }\n  }, [queryParams.input, example]);\n\n  var _React$useState = react.useState(''),\n      _React$useState2 = slicedToArray_default()(_React$useState, 2),\n      output = _React$useState2[0],\n      setOutput = _React$useState2[1];\n\n  var _React$useState3 = react.useState(false),\n      _React$useState4 = slicedToArray_default()(_React$useState3, 2),\n      updating = _React$useState4[0],\n      setUpdating = _React$useState4[1];\n\n  var handleInputChange = react.useCallback(function (event) {\n    setInput(event.target.value);\n  }, [setInput]);\n  var updateOutput = react.useMemo(function () {\n    return debounce_default()( /*#__PURE__*/function () {\n      var _ref2 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(input) {\n        var converted;\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return transform(input);\n\n              case 3:\n                converted = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                converted = _context.t0;\n\n              case 9:\n                setOutput(converted);\n                setUpdating(false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), 250);\n  }, [setOutput, setUpdating]);\n  react.useEffect(function () {\n    setUpdating(true);\n    updateOutput(input);\n  }, [input, setUpdating, updateOutput]);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: classes.root\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: classes.input\n  }, /*#__PURE__*/react.createElement(Typography/* default */.Z, {\n    variant: \"h6\",\n    color: \"initial\"\n  }, inputTitle), /*#__PURE__*/react.createElement(\"textarea\", {\n    value: input,\n    className: classes.textarea,\n    onChange: handleInputChange\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: classes.output\n  }, /*#__PURE__*/react.createElement(Typography/* default */.Z, {\n    variant: \"h6\",\n    color: \"initial\"\n  }, outputTitle), updating ? /*#__PURE__*/react.createElement(CircularProgress/* default */.Z, {\n    variant: \"indeterminate\"\n  }) : /*#__PURE__*/react.createElement(\"textarea\", {\n    value: output instanceof Error ? output.stack : output,\n    readOnly: true,\n    className: classnames_default()(classes.textarea, defineProperty_default()({}, classes.error, output instanceof Error))\n  })));\n}\n\n//# sourceURL=webpack://@codemodsquad/try-it-pages/./src/InputOutputView.tsx_+_1_modules?")},32544:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => /* binding */ CfnTemplateYamlToJs\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/cfn-template-yaml-to-js/index.js\nvar cfn_template_yaml_to_js = __webpack_require__(13967);\n// EXTERNAL MODULE: ./src/InputOutputView.tsx + 1 modules\nvar InputOutputView = __webpack_require__(25330);\n;// CONCATENATED MODULE: ./node_modules/raw-loader/dist/cjs.js!./src/examples/cfn-template.yaml\n/* harmony default export */ const cfn_template = ("---\\nAWSTemplateFormatVersion: \'2010-09-09\'\\nDescription: \'Template to install CloudWatchAgent on amazon linux. It was validated on amazon linux 2\'\\nParameters:\\n  KeyName:\\n    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\\n    Type: AWS::EC2::KeyPair::KeyName\\n    ConstraintDescription: must be the name of an existing EC2 KeyPair.\\n  InstanceType:\\n    Description: EC2 instance type\\n    Type: String\\n    Default: m4.2xlarge\\n    ConstraintDescription: must be a valid EC2 instance type.\\n  InstanceAMI:\\n    Description: Managed AMI ID for EC2 Instance\\n    Type: String\\n    Default: ami-7707a10f\\n  IAMRole:\\n    Description: EC2 attached IAM role\\n    Type: String\\n    Default: CloudWatchAgentAdminRole\\n    ConstraintDescription: must be an existing IAM role which will be attached to EC2 instance.\\n  SSHLocation:\\n    Description: The IP address range that can be used to SSH to the EC2 instances\\n    Type: String\\n    MinLength: \'9\'\\n    MaxLength: \'18\'\\n    Default: 0.0.0.0/0\\n    AllowedPattern: (\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\\n# foob\\nResources:\\n  EC2Instance:\\n    Type: AWS::EC2::Instance\\n    Metadata:\\n      AWS::CloudFormation::Init:\\n        configSets:\\n          default:\\n            - 01_setupCfnHup\\n            - 02_config-amazon-cloudwatch-agent\\n            - 03_restart_amazon-cloudwatch-agent\\n          UpdateEnvironment:\\n            - 02_config-amazon-cloudwatch-agent\\n            - 03_restart_amazon-cloudwatch-agent\\n        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.\\n        02_config-amazon-cloudwatch-agent:\\n          files:\\n            \'/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\':\\n              content: !Sub |\\n                {\\n                  \\"metrics\\": {\\n                    \\"append_dimensions\\": {\\n                      \\"AutoScalingGroupName\\": \\"${!aws:AutoScalingGroupName}\\",\\n                      \\"ImageId\\": \\"${!aws:ImageId}\\",\\n                      \\"InstanceId\\": \\"${!aws:InstanceId}\\",\\n                      \\"InstanceType\\": \\"${!aws:InstanceType}\\"\\n                    },\\n                    \\"metrics_collected\\": {\\n                      \\"mem\\": {\\n                        \\"measurement\\": [\\n                          \\"mem_used_percent\\"\\n                        ]\\n                      },\\n                      \\"swap\\": {\\n                        \\"measurement\\": [\\n                          \\"swap_used_percent\\"\\n                        ]\\n                      }\\n                    }\\n                  }\\n                }\\n        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.\\n        03_restart_amazon-cloudwatch-agent:\\n          commands:\\n            01_stop_service:\\n              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop\\n            02_start_service:\\n              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\\n        # Cfn-hup setting, it is to monitor the change of metadata.\\n        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.\\n        01_setupCfnHup:\\n          files:\\n            \'/etc/cfn/cfn-hup.conf\':\\n              content: !Sub |\\n                [main]\\n                stack=${AWS::StackId}\\n                region=${AWS::Region}\\n                interval=1\\n              mode: \'000400\'\\n              owner: root\\n              group: root\\n            \'/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf\':\\n              content: !Sub |\\n                [cfn-auto-reloader-hook]\\n                triggers=post.update\\n                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent\\n                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment\\n                runas=root\\n              mode: \'000400\'\\n              owner: root\\n              group: root\\n            \'/lib/systemd/system/cfn-hup.service\':\\n              content: !Sub |\\n                [Unit]\\n                Description=cfn-hup daemon\\n                [Service]\\n                Type=simple\\n                ExecStart=/opt/aws/bin/cfn-hup\\n                Restart=always\\n                [Install]\\n                WantedBy=multi-user.target\\n          commands:\\n            01enable_cfn_hup:\\n              command: !Sub |\\n                systemctl enable cfn-hup.service\\n            02start_cfn_hup:\\n              command: !Sub |\\n                systemctl start cfn-hup.service\\n\\n    Properties:\\n      InstanceType:\\n        Ref: InstanceType\\n      IamInstanceProfile:\\n        Ref: IAMRole\\n      KeyName:\\n        Ref: KeyName\\n      ImageId:\\n        Ref: InstanceAMI\\n      SecurityGroups:\\n        - Ref: InstanceSecurityGroup\\n      UserData:\\n        # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.\\n        Fn::Base64: !Sub |\\n          #!/bin/bash\\n          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\\n          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default\\n          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}\\n\\n    CreationPolicy:\\n      ResourceSignal:\\n        Count: 1\\n        Timeout: \'PT15M\'\\n  InstanceSecurityGroup:\\n    Type: AWS::EC2::SecurityGroup\\n    Properties:\\n      GroupDescription: Enable SSH access via port 22\\n      SecurityGroupIngress:\\n        - IpProtocol: tcp\\n          FromPort: \'22\'\\n          ToPort: \'22\'\\n          CidrIp:\\n            Ref: SSHLocation\\nOutputs:\\n  EC2Instance: !Ref EC2Instance\\n");\n;// CONCATENATED MODULE: ./src/transforms/CfnTemplateYamlToJs.tsx\n\n\n // @ts-ignore\n\n\nfunction CfnTemplateYamlToJs() {\n  return /*#__PURE__*/react.createElement(InputOutputView/* default */.Z, {\n    storageKey: "cfn-template-yaml-to-js",\n    inputTitle: "YAML Cloudformation Template",\n    outputTitle: "JS Output",\n    transform: cfn_template_yaml_to_js/* convertText */.s8,\n    example: cfn_template\n  });\n}\n\n//# sourceURL=webpack://@codemodsquad/try-it-pages/./src/transforms/CfnTemplateYamlToJs.tsx_+_1_modules?')}}]);